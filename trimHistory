#!/bin/bash

source "$HOME"/.zshenv

usage() {
	script="./$(basename "$0")"

	cat <<-DOC
	Usage: $script PATH [function]

	Using perl to make your terminal history cleaner.

	Examples:
        $script ~/.zsh_history
        $script ~/.zsh_history trimCd

	Options:
        -h, --help          show this help message
DOC
}

setLineCnt() {
	lineCnt=$(wc -l < "$zshHist")
}

countRemoved() {
	setLineCnt
	diff=$(($1 - lineCnt))
	totalRemoved=$((diff + totalRemoved))
	printf "%30s: %6s\n" "${FUNCNAME[2]} removed" "$diff"
}

trimHistory() {
	setLineCnt
	perl -i -nle "$1" "$zshHist"
	countRemoved "$lineCnt"
}

trimSingle() {
	# single char
	trimHistory "print if !/^.$/"
}

trimLs() {
	# ll, ls, l -h		(https://regex101.com/r/68bTiR)
	trimHistory "print if !/^(ls|ll|l|lf)\s*$|^l[sl]?\s-\w{1,2}\s*$/"
}

trimCd() {
	# su, -, ~, cd		(https://regex101.com/r/XRm8uN)
	trimHistory "print if !/^su$|^-?$|^~$|^cd\.*$|^cd\s(\.*|-)$|^cd\s\w+$|^cd\s\w[^\/\n]+$|^\.+$/"
}

trimMisc() {
	if [[ -z $remove ]]; then
		echo "The 'remove' variable is empty. Aborting history trim to prevent data loss."
		return 1
	fi

	# set an env var called `remove`. Edit it to be a list of words 'word1|word2'.
	trimHistory "print if !/$remove/"
}

trimQuotesSingle() {
	# remove lines w/ odd number of single quotes
	trimHistory '$n=tr/'"'"'/'"'"'/; ! print if not $n%2'
}

trimQuotesDouble() {
	# remove lines w/ odd number of double quotes
	trimHistory '$n=tr/"/"/; ! print if not $n%2' "$zshHist"
}

diffSummary() {
	# skip if zsh_hist is unmodified
	if ! git diff --exit-code "$zshHist" > /dev/null; then
		git diff --unified=0 | grep '^[+-]' | less
	fi
	echo
	git -P diff --stat "$zshHist"
}

trimAll() {
	trimSingle
	trimLs
	trimCd
	trimMisc
	trimQuotesSingle
	trimQuotesDouble
}

if [[ $# -eq 0 || $1 = -h || $1 = --help ]]; then
	usage
	exit 1
fi

zshHist="$1"
shift

totalRemoved=0	# total lines deleted
[ ! -f "$zshHist" ] && echo "File does not exist" && exit 1

echo -e "[CMD] cp $zshHist $HOME/.zsh_history.bak\n"
if ! cp "$zshHist" "$HOME"/.zsh_history.bak; then
	echo "Failed to backup file"
	exit 1
fi

if [ $# -eq 0 ]; then
	trimAll
else
	"$*"
fi

# diffSummary
printf "\n%30s: %6s\n" "Total removed" "$totalRemoved"
printf "%30s: %6s\n" "$(basename "$zshHist") line cnt" "$(wc -l < "$zshHist")"
